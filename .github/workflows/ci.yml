name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          echo "🔧 Installing system dependencies..."
          
          # Update package lists with error handling
          echo "📦 Updating package lists..."
          if ! sudo apt-get update 2>&1; then
            echo "❌ ERROR: Failed to update package lists"
            echo "This could be due to:"
            echo "  - Network connectivity issues"
            echo "  - Repository server problems"
            echo "  - Insufficient permissions"
            echo "Debug information:"
            echo "  - Network connectivity:"
            ping -c 1 archive.ubuntu.com >/dev/null 2>&1 && echo "    ✅ Can reach Ubuntu archives" || echo "    ❌ Cannot reach Ubuntu archives"
            echo "  - Available disk space:"
            df -h /var/cache/apt/
            echo "  - APT configuration:"
            apt-config dump | head -5
            exit 1
          fi
          echo "✅ Package lists updated successfully"
          
          # Install ffmpeg with comprehensive error handling
          echo "🎵 Installing ffmpeg..."
          if ! sudo apt-get install -y ffmpeg 2>&1; then
            echo "❌ ERROR: Failed to install ffmpeg"
            echo "This could be due to:"
            echo "  - Package not available in current Ubuntu version"
            echo "  - Dependency conflicts"
            echo "  - Insufficient disk space"
            echo "  - Repository synchronization issues"
            echo "Debug information:"
            echo "  - Ubuntu version: $(lsb_release -d 2>/dev/null || echo 'Unknown')"
            echo "  - Available ffmpeg packages:"
            apt-cache search ffmpeg | head -5 || echo "    Search failed"
            echo "  - Disk space:"
            df -h /
            echo "  - APT status:"
            sudo apt-get check 2>&1 | head -5 || echo "    APT check failed"
            exit 1
          fi
          
          # Verify ffmpeg installation
          echo "🔍 Verifying ffmpeg installation..."
          if ! command -v ffmpeg >/dev/null 2>&1; then
            echo "❌ ERROR: ffmpeg command not found after installation"
            echo "Debug information:"
            echo "  - PATH: $PATH"
            echo "  - Installed ffmpeg files:"
            dpkg -L ffmpeg | head -10 2>/dev/null || echo "    Package query failed"
            echo "  - Which ffmpeg:"
            which ffmpeg 2>/dev/null || echo "    Not found in PATH"
            exit 1
          fi
          
          # Display ffmpeg version and capabilities
          FFMPEG_VERSION=$(ffmpeg -version 2>/dev/null | head -1)
          echo "✅ ffmpeg installed successfully: $FFMPEG_VERSION"
          
          # Test basic ffmpeg functionality
          echo "🧪 Testing ffmpeg basic functionality..."
          if ! ffmpeg -f lavfi -i testsrc=duration=1:size=320x240:rate=1 -f null - 2>/dev/null; then
            echo "⚠️ WARNING: ffmpeg basic test failed"
            echo "This may indicate issues with ffmpeg installation or system codecs"
          else
            echo "✅ ffmpeg basic functionality test passed"
          fi
          
          echo "✅ System dependencies installation completed"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          echo "🔧 Installing uv package manager..."
          
          # Install uv using the latest official installer with error handling
          if ! curl -LsSf https://astral.sh/uv/install.sh | sh; then
            echo "❌ ERROR: Failed to download or execute uv installer"
            echo "This could be due to:"
            echo "  - Network connectivity issues"
            echo "  - Curl not available or misconfigured"
            echo "  - Installer script changes or unavailability"
            echo "Debug information:"
            echo "  - Curl version: $(curl --version | head -1)"
            echo "  - Network connectivity: $(curl -s -o /dev/null -w "%{http_code}" https://astral.sh/ || echo 'failed')"
            exit 1
          fi
          
          # Add uv to PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Verify uv installation with detailed error reporting
          echo "🔍 Verifying uv installation..."
          if ! command -v uv &> /dev/null; then
            echo "❌ ERROR: uv command not found after installation"
            echo "Debug information:"
            echo "  - PATH: $PATH"
            echo "  - Cargo bin directory contents:"
            ls -la "$HOME/.cargo/bin/" 2>/dev/null || echo "    Directory not found"
            echo "  - Available commands in PATH:"
            which -a uv 2>/dev/null || echo "    uv not found in PATH"
            exit 1
          fi
          
          # Display uv version for debugging
          UV_VERSION=$(uv --version)
          echo "✅ uv installed successfully: $UV_VERSION"

      - name: Install dependencies
        run: |
          echo "📦 Installing project dependencies..."
          
          # Check if pyproject.toml exists
          if [ ! -f "pyproject.toml" ]; then
            echo "❌ ERROR: pyproject.toml not found in current directory"
            echo "Current directory: $(pwd)"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          # Display dependency information for debugging
          echo "📋 Project configuration:"
          echo "  - Python version: $(python --version)"
          echo "  - uv version: $(uv --version)"
          echo "  - Working directory: $(pwd)"
          
          # Install all dependencies including optional extras
          echo "🔄 Installing dependencies with uv sync --all-extras..."
          if ! uv sync --all-extras 2>&1; then
            echo "❌ ERROR: Failed to install dependencies with uv sync --all-extras"
            echo "This could be due to:"
            echo "  - Missing system dependencies (ffmpeg should be installed in previous step)"
            echo "  - Network connectivity issues preventing package downloads"
            echo "  - Incompatible package versions in dependency resolution"
            echo "  - Insufficient disk space"
            echo "Debug information:"
            echo "  - Disk space: $(df -h . | tail -1)"
            echo "  - Available memory: $(free -h | head -2)"
            echo "  - Network connectivity: $(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/ || echo 'failed')"
            echo "  - Python path: $(which python)"
            echo "  - uv path: $(which uv)"
            exit 1
          fi
          
          echo "✅ Dependencies installed successfully"
          
          # Verify installation by checking key packages
          echo "🔍 Verifying key package installations..."
          MISSING_PACKAGES=""
          
          if ! uv run python -c "import whisper" 2>/dev/null; then
            MISSING_PACKAGES="$MISSING_PACKAGES whisper"
          fi
          
          if ! uv run python -c "import yt_dlp" 2>/dev/null; then
            MISSING_PACKAGES="$MISSING_PACKAGES yt-dlp"
          fi
          
          if ! uv run python -c "import tqdm" 2>/dev/null; then
            MISSING_PACKAGES="$MISSING_PACKAGES tqdm"
          fi
          
          if [ -n "$MISSING_PACKAGES" ]; then
            echo "⚠️ WARNING: Some key packages are missing:$MISSING_PACKAGES"
            echo "This may cause test failures"
          else
            echo "✅ All key packages verified successfully"
          fi

      - name: Run tests
        run: |
          echo "🧪 Running test suite..."
          
          # Check if tests directory exists
          if [ ! -d "tests" ]; then
            echo "⚠️ WARNING: tests directory not found"
            echo "Available directories:"
            ls -la
            echo "Skipping tests as no test directory exists"
            exit 0
          fi
          
          # Display test environment information
          echo "📋 Test environment:"
          echo "  - Python version: $(uv run python --version)"
          echo "  - pytest version: $(uv run python -c "import pytest; print(f'pytest {pytest.__version__}')" 2>/dev/null || echo 'pytest not available')"
          echo "  - Test directory contents:"
          ls -la tests/
          
          # Run tests with comprehensive error reporting
          echo "🚀 Executing pytest..."
          if ! uv run pytest -v --tb=short --durations=10 2>&1; then
            echo "❌ ERROR: Test suite failed"
            echo "Common causes of test failures:"
            echo "  - Missing system dependencies (ffmpeg)"
            echo "  - Network connectivity issues for download tests"
            echo "  - Missing test data files"
            echo "  - Environment-specific configuration issues"
            echo "Debug information:"
            echo "  - Available system commands:"
            echo "    - ffmpeg: $(which ffmpeg 2>/dev/null || echo 'not found')"
            echo "    - python: $(which python 2>/dev/null || echo 'not found')"
            echo "  - Python path:"
            uv run python -c "import sys; print('\n'.join(sys.path))" 2>/dev/null || echo "    Failed to get Python path"
            echo "  - Installed packages:"
            uv run pip list 2>/dev/null | head -10 || echo "    Failed to list packages"
            exit 1
          fi
          
          echo "✅ All tests passed successfully"

      - name: Run linting and code quality checks
        run: |
          echo "Checking for linting tools availability..."
          
          # Check if ruff is available and run it
          if uv run python -c "import ruff" 2>/dev/null || uv run ruff --version 2>/dev/null; then
            echo "Running ruff linting..."
            if ! uv run ruff check .; then
              echo "Error: ruff linting failed"
              exit 1
            fi
            echo "✓ ruff linting passed"
          else
            echo "Warning: ruff not available, skipping ruff checks"
          fi
          
          # Check if black is available and run it
          if uv run python -c "import black" 2>/dev/null || uv run black --version 2>/dev/null; then
            echo "Running black formatting check..."
            if ! uv run black --check .; then
              echo "Error: black formatting check failed"
              echo "Run 'black .' to fix formatting issues"
              exit 1
            fi
            echo "✓ black formatting check passed"
          else
            echo "Warning: black not available, skipping formatting checks"
          fi
          
          echo "All available linting and code quality checks completed successfully"

      - name: Test CLI functionality
        run: |
          echo "🖥️ Testing CLI functionality..."
          
          # Test 1: Basic help command
          echo "📋 Test 1: Testing help command..."
          if ! timeout 30 uv run whisper_video_to_text --help 2>&1; then
            echo "❌ ERROR: CLI help command failed or timed out"
            echo "This could be due to:"
            echo "  - Package not properly installed"
            echo "  - Missing entry points in pyproject.toml"
            echo "  - Import errors in the main module"
            echo "Debug information:"
            echo "  - Package installation check:"
            uv run python -c "import whisper_video_to_text; print('✅ Package imports successfully')" 2>/dev/null || echo "    ❌ Package import failed"
            echo "  - Entry points check:"
            uv run python -c "import pkg_resources; print([ep for ep in pkg_resources.iter_entry_points('console_scripts') if 'whisper' in ep.name])" 2>/dev/null || echo "    ❌ Entry points check failed"
            echo "  - Module path:"
            uv run python -c "import whisper_video_to_text; print(whisper_video_to_text.__file__)" 2>/dev/null || echo "    ❌ Module path check failed"
            exit 1
          fi
          echo "✅ Help command test passed"
          
          # Test 2: Version information (if available)
          echo "📋 Test 2: Testing version information..."
          if uv run whisper_video_to_text --version 2>/dev/null; then
            echo "✅ Version command available and working"
          else
            echo "ℹ️ Version command not available (this is optional)"
          fi
          
          # Test 3: Invalid argument handling
          echo "📋 Test 3: Testing error handling with invalid arguments..."
          if uv run whisper_video_to_text --invalid-argument 2>/dev/null; then
            echo "⚠️ WARNING: CLI accepted invalid argument (should show error)"
          else
            echo "✅ CLI properly rejects invalid arguments"
          fi
          
          # Test 4: Module execution alternative
          echo "📋 Test 4: Testing module execution alternative..."
          if ! timeout 30 uv run python -m whisper_video_to_text --help 2>&1; then
            echo "⚠️ WARNING: Module execution failed"
            echo "This may indicate issues with __main__.py"
          else
            echo "✅ Module execution works correctly"
          fi
          
          echo "✅ CLI functionality tests completed"

      - name: Test Job Summary
        if: always()
        run: |
          echo "📊 Test Job Execution Summary"
          echo "============================="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Python Version: ${{ matrix.python-version }}"
          echo "Workflow Run: ${{ github.run_number }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          
          # Check job status and provide summary
          echo "🔍 Step Results Summary:"
          
          # System dependencies
          if command -v ffmpeg >/dev/null 2>&1; then
            echo "  ✅ System dependencies (ffmpeg): Installed ($(ffmpeg -version 2>/dev/null | head -1 | cut -d' ' -f3))"
          else
            echo "  ❌ System dependencies (ffmpeg): Failed"
          fi
          
          # uv installation
          if command -v uv >/dev/null 2>&1; then
            echo "  ✅ uv package manager: Installed ($(uv --version))"
          else
            echo "  ❌ uv package manager: Failed"
          fi
          
          # Python environment
          echo "  ✅ Python environment: ${{ matrix.python-version }} ($(python --version 2>/dev/null || echo 'Unknown'))"
          
          # Package installation
          if uv run python -c "import whisper_video_to_text" 2>/dev/null; then
            echo "  ✅ Package installation: Success"
          else
            echo "  ❌ Package installation: Failed"
          fi
          
          # Tests
          if [ -d "tests" ]; then
            echo "  ✅ Tests: Directory exists ($(ls tests/*.py 2>/dev/null | wc -l) test files)"
          else
            echo "  ⚠️ Tests: No test directory found"
          fi
          
          # CLI functionality
          if timeout 10 uv run whisper_video_to_text --help >/dev/null 2>&1; then
            echo "  ✅ CLI functionality: Working"
          else
            echo "  ❌ CLI functionality: Failed"
          fi
          
          # Linting tools
          LINTING_STATUS="Unknown"
          if uv run ruff --version >/dev/null 2>&1; then
            LINTING_STATUS="ruff available"
          fi
          if uv run black --version >/dev/null 2>&1; then
            LINTING_STATUS="$LINTING_STATUS, black available"
          fi
          echo "  ℹ️ Linting tools: $LINTING_STATUS"
          
          echo ""
          echo "🎯 Test job completed for Python ${{ matrix.python-version }}"
          echo "📅 Execution time: $(date)"
          
          # Provide troubleshooting information if there were failures
          if [ "${{ job.status }}" != "success" ]; then
            echo ""
            echo "🚨 Troubleshooting Information:"
            echo "  - Check individual step logs above for detailed error messages"
            echo "  - Verify system dependencies are properly installed"
            echo "  - Ensure pyproject.toml configuration is correct"
            echo "  - Check for network connectivity issues"
            echo "  - Verify Python version compatibility"
            echo "  - Review package import errors"
          fi

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "Building Docker image with proper context and tagging..."
          
          # Verify build prerequisites
          echo "Verifying build context..."
          echo "Build context: $(pwd)"
          echo "Dockerfile exists: $(test -f Dockerfile && echo 'yes' || echo 'no')"
          echo "Key files in build context:"
          ls -la | head -10
          
          # Build with proper tagging and build context
          echo "Starting Docker build..."
          if ! docker build \
            --tag whisper-video-to-text:latest \
            --tag whisper-video-to-text:${{ github.sha }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --file Dockerfile \
            --progress=plain \
            .; then
            echo "Error: Docker build failed"
            echo "Docker system info:"
            docker system df || true
            echo "Available disk space:"
            df -h || true
            echo "Docker version:"
            docker version || true
            exit 1
          fi
          
          echo "✓ Docker image built successfully"
          echo "Built images:"
          docker images whisper-video-to-text
          
          # Verify both tags were created
          if ! docker images whisper-video-to-text:latest --format "{{.Repository}}:{{.Tag}}" | grep -q "latest"; then
            echo "Error: Latest tag not found"
            exit 1
          fi
          if ! docker images whisper-video-to-text:${{ github.sha }} --format "{{.Repository}}:{{.Tag}}" | grep -q "${{ github.sha }}"; then
            echo "Error: SHA tag not found"
            exit 1
          fi
          echo "✓ All required tags verified"

      - name: Test Docker container functionality
        run: |
          echo "Running comprehensive Docker container tests..."
          
          # Test 1: Basic help command
          echo "Test 1: Testing help command..."
          if ! timeout 30 docker run --rm whisper-video-to-text:latest --help; then
            echo "Error: Help command failed or timed out"
            exit 1
          fi
          echo "✓ Help command test passed"
          
          # Test 2: Test container startup and Python environment
          echo "Test 2: Testing Python environment..."
          if ! timeout 30 docker run --rm --entrypoint="" whisper-video-to-text:latest python -c "import whisper_video_to_text; print('Package imported successfully')"; then
            echo "Error: Python environment test failed or timed out"
            exit 1
          fi
          echo "✓ Python environment test passed"
          
          # Test 3: Test system dependencies (ffmpeg)
          echo "Test 3: Testing system dependencies..."
          if ! timeout 30 docker run --rm --entrypoint="" whisper-video-to-text:latest ffmpeg -version; then
            echo "Error: ffmpeg not available in container or timed out"
            exit 1
          fi
          echo "✓ System dependencies test passed"
          
          # Test 4: Test container with volume mount capability
          echo "Test 4: Testing volume mount capability..."
          if ! timeout 30 docker run --rm -v "$PWD:/workspace" --entrypoint="" whisper-video-to-text:latest ls /workspace; then
            echo "Error: Volume mount test failed or timed out"
            exit 1
          fi
          echo "✓ Volume mount test passed"
          
          # Test 5: Test container health check
          echo "Test 5: Testing container health check..."
          CONTAINER_ID=$(docker run -d --name test-health whisper-video-to-text:latest --help)
          sleep 5
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' test-health 2>/dev/null || echo "no-healthcheck")
          docker stop test-health >/dev/null 2>&1 || true
          docker rm test-health >/dev/null 2>&1 || true
          if [ "$HEALTH_STATUS" = "unhealthy" ]; then
            echo "Error: Container health check failed"
            exit 1
          fi
          echo "✓ Container health check test passed (status: $HEALTH_STATUS)"
          
          # Test 6: Test container resource limits and cleanup
          echo "Test 6: Testing container cleanup..."
          CONTAINER_ID=$(timeout 10 docker run -d whisper-video-to-text:latest --help)
          sleep 3
          if docker ps -q --filter "id=$CONTAINER_ID" | grep -q .; then
            echo "Warning: Container did not exit cleanly"
            docker stop "$CONTAINER_ID" >/dev/null 2>&1 || true
            docker rm "$CONTAINER_ID" >/dev/null 2>&1 || true
          fi
          echo "✓ Container cleanup test passed"
          
          echo "All Docker container tests completed successfully"

      - name: Verify Docker image properties
        run: |
          echo "Verifying Docker image properties..."
          
          # Check image size and warn if too large
          IMAGE_SIZE=$(docker images whisper-video-to-text:latest --format "{{.Size}}")
          echo "Image size: $IMAGE_SIZE"
          
          # Extract numeric size for comparison (rough check)
          SIZE_NUM=$(echo "$IMAGE_SIZE" | sed 's/[^0-9.]//g' | head -c 10)
          if echo "$IMAGE_SIZE" | grep -q "GB" && [ "${SIZE_NUM%.*}" -gt 2 ]; then
            echo "Warning: Image size is quite large (>2GB). Consider optimizing."
          fi
          
          # Check image layers and count
          echo "Image layers:"
          LAYER_COUNT=$(docker history whisper-video-to-text:latest --quiet | wc -l)
          echo "Total layers: $LAYER_COUNT"
          docker history whisper-video-to-text:latest --format "table {{.CreatedBy}}\t{{.Size}}" | head -10
          
          # Verify image metadata and security
          echo "Image security and metadata verification:"
          USER_CONFIG=$(docker inspect whisper-video-to-text:latest --format='{{.Config.User}}')
          ENTRYPOINT=$(docker inspect whisper-video-to-text:latest --format='{{.Config.Entrypoint}}')
          HEALTHCHECK=$(docker inspect whisper-video-to-text:latest --format='{{.Config.Healthcheck}}')
          
          echo "User: $USER_CONFIG"
          echo "Entrypoint: $ENTRYPOINT"
          echo "Healthcheck configured: $([ "$HEALTHCHECK" != "<nil>" ] && echo "yes" || echo "no")"
          
          # Verify non-root user is configured
          if [ "$USER_CONFIG" = "" ] || [ "$USER_CONFIG" = "root" ]; then
            echo "Warning: Container may be running as root user"
          else
            echo "✓ Non-root user configured: $USER_CONFIG"
          fi
          
          # Verify entrypoint is properly set
          if [ "$ENTRYPOINT" = "<nil>" ] || [ "$ENTRYPOINT" = "[]" ]; then
            echo "Warning: No entrypoint configured"
          else
            echo "✓ Entrypoint properly configured"
          fi
          
          echo "✓ Docker image verification completed"

      - name: Docker Job Summary
        if: always()
        run: |
          echo "📊 Docker Job Execution Summary"
          echo "==============================="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow Run: ${{ github.run_number }}"
          echo ""
          
          # Check Docker job status and provide summary
          echo "🔍 Docker Step Results Summary:"
          
          # Docker availability
          if command -v docker >/dev/null 2>&1; then
            echo "  ✅ Docker engine: Available ($(docker --version | cut -d' ' -f3 | cut -d',' -f1))"
          else
            echo "  ❌ Docker engine: Not available"
          fi
          
          # Image build status
          if docker images whisper-video-to-text:latest --format "{{.Repository}}" | grep -q whisper-video-to-text; then
            IMAGE_SIZE=$(docker images whisper-video-to-text:latest --format "{{.Size}}")
            echo "  ✅ Docker image build: Success (size: $IMAGE_SIZE)"
          else
            echo "  ❌ Docker image build: Failed"
          fi
          
          # Image tags verification
          LATEST_TAG=$(docker images whisper-video-to-text:latest --format "{{.Tag}}" 2>/dev/null || echo "missing")
          SHA_TAG=$(docker images whisper-video-to-text:${{ github.sha }} --format "{{.Tag}}" 2>/dev/null || echo "missing")
          echo "  ℹ️ Image tags: latest=$LATEST_TAG, sha=$SHA_TAG"
          
          # Container functionality tests
          if timeout 10 docker run --rm whisper-video-to-text:latest --help >/dev/null 2>&1; then
            echo "  ✅ Container functionality: Working"
          else
            echo "  ❌ Container functionality: Failed"
          fi
          
          # Image security check
          USER_CONFIG=$(docker inspect whisper-video-to-text:latest --format='{{.Config.User}}' 2>/dev/null || echo "unknown")
          if [ "$USER_CONFIG" != "" ] && [ "$USER_CONFIG" != "root" ] && [ "$USER_CONFIG" != "unknown" ]; then
            echo "  ✅ Container security: Non-root user ($USER_CONFIG)"
          else
            echo "  ⚠️ Container security: Running as root or unknown user"
          fi
          
          echo ""
          echo "🎯 Docker job completed"
          echo "📅 Execution time: $(date)"
          
          # Provide troubleshooting information if there were failures
          if [ "${{ job.status }}" != "success" ]; then
            echo ""
            echo "🚨 Docker Troubleshooting Information:"
            echo "  - Check Docker build logs for compilation errors"
            echo "  - Verify Dockerfile syntax and base image availability"
            echo "  - Ensure sufficient disk space for image layers"
            echo "  - Check for network issues during package downloads"
            echo "  - Verify container runtime functionality"
          fi
